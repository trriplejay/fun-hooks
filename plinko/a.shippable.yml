### only used in this first row
resources:
  - name: start
    type: webhook
    versionTemplate:
      webhookKey: startplinko


#### row A, the starting row
jobs:
  - name: A1
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

  - name: A2
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"

  - name: A3
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"

  - name: A4
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"

  - name: A5
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"

  - name: A6
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"

  - name: A7
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"

  - name: A8
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"

  - name: A9
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: start
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - export response_url=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.response_url")
            - export message=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.text")
            - export user=$(shipctl get_json_value "$HOOK_META/version.json" "version.propertyBag.payload.user_name")
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - if [ "$message" != $JOB_NAME ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
