### row B, has 8 members

jobs:
  - name: B1
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B1
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "0" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result


  - name: B2
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B2
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "1" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

  - name: B3
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B3
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "0" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

  - name: B4
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B4
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "1" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

  - name: B5
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B5
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "0" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

  - name: B6
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B6
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "1" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

  - name: B7
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B7
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "0" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

  - name: B8
    type: runSh
    flags:
      - plinko
    dependencyMode: immediate
    runtime:
        nodePool: u14-dyna
    steps:
      - IN: B8
      - IN: reset
      - TASK:
          script:
            - if [ $JOB_TRIGGERED_BY_NAME == "reset" ]; then echo "resetting job to failed state"; return 1; fi
            - HOOK_META=$(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)
            - source $(shipctl get_resource_meta $JOB_TRIGGERED_BY_NAME)/$JOB_TRIGGERED_BY_NAME.env
            - echo "$JOB_TRIGGERED_BY_NAME"
            - echo "message is $message"
            - echo "user is $user"
            - echo "result is $result"
            - if [ $result != "1" ]; then return 1; fi
    on_success:
      script:
        - shipctl put_resource_state $JOB_NAME response_url "$response_url"
        - shipctl put_resource_state $JOB_NAME user "$user"
        - result=$($RANDOM % 2)
        - shipctl put_resource_state $JOB_NAME result=$result

#### triggering IN resources
resources:
  - name: B1Trig
    type: params
    versionTemplate:
      params:
        name: B1Trig

  - name: B2Trig
    type: params
    versionTemplate:
      params:
        name: B2Trig

  - name: B3Trig
    type: params
    versionTemplate:
      params:
        name: B3Trig

  - name: B4Trig
    type: params
    versionTemplate:
      params:
        name: A4Trig

  - name: B5Trig
    type: params
    versionTemplate:
      params:
        name: A5Trig

  - name: B6Trig
    type: params
    versionTemplate:
      params:
        name: A6Trig

  - name: B7Trig
    type: params
    versionTemplate:
      params:
        name: A7Trig

  - name: B8Trig
    type: params
    versionTemplate:
      params:
        name: A8Trig

  - name: B9Trig
    type: params
    versionTemplate:
      params:
        name: B9Trig